// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id               String            @id @default(dbgenerated("gen_random_uuid()"))
  email            String            @unique
  password         String
  role             UserRole          @default(USER)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  EmailValidations EmailValidation[]
  ApiKeys          ApiKey[]
  AccessLog        AccessLog[]
}

model EmailValidation {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()"))
  emailAddress         String
  isValid              Boolean
  formatValid          Boolean?
  domainExists         Boolean?
  hasMxRecords         Boolean?
  isDisposableEmail    Boolean?
  isRoleEmail          Boolean?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  userId               String?
  User                 User?                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  DomainCheck          DomainCheck[]
  DisposableEmailCheck DisposableEmailCheck[]
  RoleBasedEmailCheck  RoleBasedEmailCheck[]

  @@index([userId], name: "idx_email_validation_user")
}

model ApiKey {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  key       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "idx_api_key_user")
}

model DomainCheck {
  id                String          @id @default(dbgenerated("gen_random_uuid()"))
  emailAddress      String
  domain            String
  hasMxRecords      Boolean
  createdAt         DateTime        @default(now())
  EmailValidation   EmailValidation @relation(fields: [emailValidationId], references: [id], onDelete: Cascade)
  emailValidationId String

  @@index([emailValidationId], name: "idx_domain_check_email_validation")
}

model DisposableEmailCheck {
  id                String          @id @default(dbgenerated("gen_random_uuid()"))
  emailAddress      String
  isDisposable      Boolean
  createdAt         DateTime        @default(now())
  EmailValidation   EmailValidation @relation(fields: [emailValidationId], references: [id], onDelete: Cascade)
  emailValidationId String

  @@index([emailValidationId], name: "idx_disposable_email_check_email_validation")
}

model RoleBasedEmailCheck {
  id                String          @id @default(dbgenerated("gen_random_uuid()"))
  emailAddress      String
  isRoleBased       Boolean
  createdAt         DateTime        @default(now())
  EmailValidation   EmailValidation @relation(fields: [emailValidationId], references: [id], onDelete: Cascade)
  emailValidationId String

  @@index([emailValidationId], name: "idx_role_based_email_check_email_validation")
}

model AccessLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  accessedAt DateTime @default(now())
  ipAddress  String
  userId     String?
  User       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  endpoint   String

  @@index([userId], name: "idx_access_log_user")
}

enum UserRole {
  GUEST
  USER
  ADMIN
  SUBSCRIBER
}

